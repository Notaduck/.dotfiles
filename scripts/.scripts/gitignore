#!/bin/env python
# coding: utf-8

from bs4 import BeautifulSoup
import requests
import re
import argparse
import urllib.request
import os
import sys

parser = argparse.ArgumentParser(description = "This i a simple python script to download gitignorefiles")
parser.add_argument('-t','--type', type=str, metavar='', help='type')
parser.add_argument('-l','--list', help='List available gitignore files', action="store_true")
args = parser.parse_args()

debug = False

def download():
    url = "https://raw.githubusercontent.com/notaduck/gitignore/master/" + args.type + ".gitignore"
    
    is_a_repo = os.path.exists('./.git')
    if debug : print("There is a git repo " + is_a_repo)

    if not is_a_repo:
        question = "Do you wan't to initialize a git repository in the current folder?"
        promt = query_yes_no(question, "no")
        if promt:
            os.system("git init")
            os.system("git add .gitignore")
            os.system("git commit -m \"gitignore has been added to the repo\"")
        else: 
            sys.exit()
    gitignore_exists = os.path.isfile('./gitignore')
    if gitignore_exists:
        quiestion_ = "It looks like .gitignore all ready exists, are you sure you want to overwrite it?"
        anwser = query_yes_no(quiestion_, 'yes')
        if anwser: 
            try:
                urllib.request.urlretrieve(url, '.gitignore')
            except urllib.request.HTTPError:
                print("It doesn't look like that the gitignore file for " + args.type + " is in the repo")
        else: sys.exit()

def list():
    url = "https://github.com/notaduck/gitignore"
    response = requests.get(url, timeout=5)
    content = BeautifulSoup(response.content, 'html.parser')
    td = content.findAll('td', attrs={'class': 'content'})
    files = []
    for n in range(4, len(td)):
        lang = (td[n].text.strip().split('.'))[0]
        print(lang)
        files.append(lang)
        files.pop(0)

    return files

def display():
    languages = list()
    for lang in languages:
        print(lang)

def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is True for "yes" or False for "no".
    """
    valid = {"yes": True, "y": True, "ye": True,
             "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")
if __name__ == '__main__':
    if args.list:
        list()
    else:
        if not args.type:
            print("See -h or --help")
        else: download()

# vim: set syntax=python:
